name: Run T4L Content Pipeline

on:
  schedule:
    # Run every 20th minute after the full hour, except between 01:00 and 08:00 UTC
    - cron: '20 0,8-23 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 55  # keep under your 60-min schedule gap
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
      PYTHONPATH: .
      PLAYWRIGHT_VERSION: '1.47.2'  # pin to a known-good; update when you choose

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Pin Node LTS for the Playwright Node driver
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Python dependencies (pin Playwright)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install "playwright==${PLAYWRIGHT_VERSION}"

      - name: Determine Playwright version (for cache key)
        run: |
          python - <<'PY'
import os
try:
    import importlib.metadata as m
    v = m.version("playwright")
except Exception as e:
    print("playwright version lookup failed:", repr(e))
    v = "unknown"
print("playwright", v)
with open(os.environ["GITHUB_ENV"], "a") as f:
    f.write(f"PW_VERSION={v}\n")
PY

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PW_VERSION }}

      - name: Install Playwright browsers (idempotent with cache)
        run: |
          python -m playwright install --with-deps chromium

      - name: Print runtime versions (sanity check)
        run: |
          node -v
          python - <<'PY'
import sys
print("py", sys.version)
try:
    import importlib.metadata as m
    print("playwright", m.version("playwright"))
except Exception as e:
    print("playwright version lookup failed:", repr(e))
PY

      - name: Run article cleanup pipeline
        run: python scripts/cleanup_pipeline.py

      - name: Run article cluster pipeline
        run: python scripts/cluster_pipeline.py
